#!/usr/bin/env bash

set -e

if [ -n "${JQ_API_DEBUG}" ]; then
  set -x
fi

config="${JQ_API_CONFIG:-config.json}"
work_dir="${JQ_API_WORKING_DIR:-/var/local/jq-api}"
cli_script="${work_dir}/${JQ_API_CLI_SCRIPT:-cli.sh}"
server_config="${work_dir}/${JQ_API_SERVER_CONFIG:-server.conf}"
checksum_file="${work_dir}/$(basename "${config}").checksum"

error()
{
  echo "${*}" >&2
  exit 1
}

config_jq_filter()
{
  jq -r "${1:-.}" "${config}"
}

config_json()
{
  local -r file=$(realpath "$(config_jq_filter .json)")
  if [[ ! -r "${file}" ]]; then
    error "configure: json=${file} file not found"
  fi
  echo "${file}"
}

config_library_path()
{
  local path
  path=$(config_jq_filter 'if has("library_path") then .library_path else "" end')
  if [[ -n "${path}" ]]; then
    path=$(realpath "${path}")
    if [[ ! -d "${path}" ]]; then
      error "configure: library_path=${path} directory not found"
    fi
    echo "${path}"
  fi
}

config_arguments_keys()
{
  config_jq_filter '.arguments | keys[]'
}

config_arguments_has()
{
  if [[ -z "${1}" ]]; then
    error "configure: arguments key is not specified"
  fi
  local has
  has=$(config_jq_filter ".arguments | has(\"${1}\")")
  if [[ "${has}" == "false" ]]; then
    error "configure: arguments.[${1}] key is missing"
  fi
}

config_arguments_pattern()
{
  if [[ -z "${1}" ]]; then
    error "configure: arguments.[].pattern key is not specified"
  fi
  local pattern
  pattern=$(config_jq_filter ".arguments.\"${1}\" | if has(\"pattern\") then .pattern else \"\" end")
  case "${pattern}" in
    number)
      echo '[1-9][0-9]*'
      ;;
    json)
      echo '{.*}'
      ;;
    *)
      echo "${pattern:-.*}"
      ;;
  esac
}

config_routes_keys()
{
  config_jq_filter '.routes | keys[]'
}

config_routes_filter()
{
  if [[ -z "${1}" ]]; then
    error "configure: routes.[].filter key is not specified"
  fi
  local filter
  filter=$(config_jq_filter ".routes.\"${1}\" | if has(\"filter\") then .filter else \"\" end")
  if [[ -z "${filter}" ]]; then
    error "configure: routes.[${1}].filter key is missing"
  fi
  echo "${filter}"
}

config_routes_parameters()
{
  if [[ -z "${1}" ]]; then
    error "configure: routes.[].parameters key is not specified"
  fi
  config_jq_filter ".routes.\"${1}\" | if has(\"parameters\") then .parameters[] else \"\" end"
}

config_route_remove_curly_braces()
{
  if [[ -z "${1}" ]]; then
    error "configure: route key is not specified"
  fi
  echo "${1}"| grep -o '{[^}]*}' | tr -d '{' | tr -d '}'
}

config_settings_cli_options()
{
  local var
  var=$(config_jq_filter '.settings.cli.options')
  if [[ -n "${var}" ]] && [[ "${var}" != "null" ]]; then
    echo "${var}"
  fi
}

config_settings_server_cache_has()
{
  local has
  has=$(config_jq_filter ".settings.server | has(\"cache\")")
  if [[ "${has}" == "true" ]]; then
    echo "cache"
  fi
}

config_settings_server_cache()
{
  local -r key="${1}"
  if [[ -z "${key}" ]]; then
    error "configure: settings.server.cache key is not specified"
  fi
  local -r var=$(config_jq_filter ".settings.server.cache.\"${key}\"")
  if [[ -z "${var}" ]] || [[ "${var}" == "null" ]]; then
    error "configure: settings.server.cache.${key} key is missing"
  fi
  echo "${var}"
}

config_settings_server_cors_has()
{
  local has
  has=$(config_jq_filter ".settings.server | has(\"cors\")")
  if [[ "${has}" == "true" ]]; then
    echo "cors"
  fi
}

config_settings_server_cors()
{
  local -r key="${1}"
  local var
  if [[ -n "${key}" ]]; then
    var=$(config_jq_filter ".settings.server.cors.\"${key}\"")
    if [[ -n "${var}" ]] && [[ "${var}" != "null" ]]; then
      echo "${var}"
    fi
  fi
}

config_settings_server_ssl_has()
{
  local has
  has=$(config_jq_filter ".settings.server | has(\"ssl\")")
  if [[ "${has}" == "true" ]]; then
    echo "ssl"
  fi
}

config_settings_server_ssl()
{
  local -r key="${1}"
  if [[ -z "${key}" ]]; then
    error "configure: settings.server.ssl key is not specified"
  fi

  local -r var=$(config_jq_filter ".settings.server.ssl.\"${key}\"")
  if [[ -z "${var}" ]] || [[ "${var}" == "null" ]]; then
    error "configure: settings.server.ssl.${key} key is missing"
  fi

  local -r file=$(realpath "${var}")
  if [[ ! -r "${file}" ]]; then
    error "configure: settings.server.ssl.${key}=${file} file not found"
  fi
  echo "${file}"
}

config_settings_server_error_filter()
{
  local var
  var=$(config_jq_filter '.settings.server.error.filter')
  if [[ -n "${var}" ]] && [[ "${var}" != "null" ]]; then
    echo "${var}"
  fi
}

generator_bash_script()
{
  local json
  json=$(config_json)
  cat << EOT
#!/usr/bin/env bash

set -e

json=${json}
EOT
  local library_path
  library_path=$(config_library_path)
  if [[ -n "${library_path}" ]]; then
    cat << EOT
library_path=${library_path}
EOT
  fi

  # data
  cat << EOT

data()
{
  local -r delimiter="\${2:-=}"

  case "\${1}" in
EOT
  local arg
  local pattern
  while IFS= read -r arg; do
    pattern=$(config_arguments_pattern "${arg}")
    cat << EOT
    ${arg})
      echo "  ${arg}\${delimiter}${pattern}"
      ;;
EOT
  done < <(config_arguments_keys)
  cat << EOT
  esac
}
EOT

  # help
  cat << EOT

help()
{
  if [[ -n "\${3}" ]]; then
    echo "Usage: \${1} [OPTIONS]"
  else
    echo "Usage: \${1}"
  fi
  if [[ -n "\${2}" ]]; then
    for arg in \${2}; do
      data "\${arg}" ": "
    done
  fi
  if [[ -n "\${3}" ]]; then
    echo
    echo "Options:"
    echo "  -d, --data <DATA>  Set data"
    echo "  -h, --help         Show help message"
    echo
    echo "Data:"
    for arg in \${3}; do
      data "\${arg}" "="
    done
  fi
}
EOT

  # arguments()
  cat << EOT

arguments()
{
  local -r command="\${1}"
  local -r parameter="\${2}"
  local -r query="\${3}"
  local arg=
  local data=
  shift 4

  while [[ ! "\${1}" = "" ]]; do
    case "\${1}" in
      -d|--data)
        arg="\${2%%=*}"
        data="\${2#*=}"
        if [[ ! "\${query}" =~ \${arg}\\  ]]; then
          echo "cli: invalid data: \${arg}" >&2
          exit 1
        fi
        case "\${arg}" in
EOT
  local regex
  while IFS= read -r arg; do
    pattern=$(config_arguments_pattern "${arg}")
    # shellcheck disable=SC2001
    regex="$(echo "${pattern}" | sed 's/\([{}]\)/\\\1/g')"
  cat << EOT
          ${arg})
            if [[ -z "\${data}" ]] || [[ ! "\${data}" =~ ^(${regex})\$ ]]; then
              echo "cli: invalid data: ${arg}=${pattern}: \${data}" >&2
              exit 1
            fi
            ${arg}="\${data}"
            ;;
EOT
  done < <(config_arguments_keys)
  cat << EOT
          *)
            echo "cli: invalid data: \${arg}" >&2
            exit 1
            ;;
        esac
        shift 2
        ;;
      -h|--help)
        help "\${command}" "\${parameter}" "\${query}"
        exit 0
        ;;
      *)
        shift 1
        ;;
    esac
  done
}
EOT

  # main()
  cat << EOT

main()
{
  case "\${1}" in
EOT

  local route
  local filter
  local query
  local var
  while IFS= read -r route; do
    filter=$(config_routes_filter "${route}")
    arg=$(config_settings_cli_options)
    if [[ -n "${library_path}" ]]; then
      arg="${arg} -L \"\${library_path}\" "
    fi
    query=''
    while IFS= read -r var; do
      if [[ -z "${var}" ]]; then
        continue
      fi
      config_arguments_has "${var}"
      arg="${arg} --arg ${var} \"\${${var}}\""
      query="${query}${var} "
    done < <(config_routes_parameters "${route}")
    cat << EOT
    ${route})
      arguments '${route}' '' '${query}' "\${@}"
      jq ${arg} '${filter}' "\${json}"
      ;;
EOT
  done < <(config_routes_keys | grep -v '{.*}')

  local parameter
  local rematch
  while IFS= read -r route; do
    filter=$(config_routes_filter "${route}")
    arg=$(config_settings_cli_options)
    if [[ -n "${library_path}" ]]; then
      arg="${arg} -L \"\${library_path}\" "
    fi
    regex="${route}"
    parameter=
    while IFS= read -r var; do
      config_arguments_has "${var}"
      arg="${arg} --arg ${var} \"\${${var}}\""
      pattern=$(config_arguments_pattern "${var}")
      regex=${regex//\{${var}\}/(${pattern})}
      parameter="${parameter}${var} "
    done < <(config_route_remove_curly_braces "${route}")
    query=''
    while IFS= read -r var; do
      if [[ -z "${var}" ]]; then
        continue
      fi
      config_arguments_has "${var}"
      arg="${arg} --arg ${var} \"\${${var}}\""
      query="${query}${var} "
    done < <(config_routes_parameters "${route}")
    # shellcheck disable=SC2001
    var="$(echo "${route}"| sed 's/{[^}]*}/*/g')"
    cat << EOT
    ${var})
      if [[ ! "\${1}" =~ ^${regex}\$ ]]; then
        help '${route}' '${parameter}' '${query}'
        exit 1
      fi
EOT
    rematch=1
    for var in ${parameter}; do
      if [[ -z "${var}" ]]; then
        continue
      fi
      cat << EOT
      local -r ${var}=\${BASH_REMATCH[${rematch}]}
EOT
      rematch=$((rematch+1))
    done
    cat << EOT
      arguments '${route}' '${parameter}' '${query}' "\${@}"
      jq ${arg} '${filter}' "\${json}"
      ;;
EOT
  done < <(config_routes_keys | grep '{.*}' | sort -r)
  cat << EOT
    -h|--help|"")
      echo "Usage: <COMMAND>"
      echo
      echo "Command:"
EOT
  while IFS= read -r route; do
  cat << EOT
      echo "  ${route}"
EOT
  done < <(config_routes_keys)
  cat << EOT
      ;;
    *)
      echo "cli: command not found: \${1}"
      exit 1
      ;;
  esac
}

main "\${@}"
EOT

}

generage_nginx_config()
{
  local -r cache_has=$(config_settings_server_cache_has)
  if [[ -n "${cache_has}" ]]; then
    local cache_path
    cache_path=$(config_settings_server_cache "path")
    local cache_check_path
    local cache_check_path_has
    cache_check_path="${cache_path}"
    while [[ "${cache_check_path}" != "/" ]] && [[ "${cache_check_path}" != "." ]]; do
      if [[ -d "${cache_check_path}" ]]; then
        cache_check_path_has="true"
        break
      fi
      cache_check_path=$(dirname "${cache_check_path}")
    done
    if [[ -z "${cache_check_path_has}" ]]; then
      error "configure: setting.server.cache.path=${cache_path} directory not found"
    fi
    local cache_time
    cache_time=$(config_settings_server_cache "time")
    local cache_max_size
    cache_max_size=$(config_settings_server_cache "max_size")
    cat << EOT
proxy_cache_path ${cache_path} levels=1:2 use_temp_path=off keys_zone=cache:1m inactive=${cache_time} max_size=${cache_max_size};

EOT
  fi

  cat << EOT
server {
  listen 80 default_server;
  listen [::]:80 default_server;
EOT

  local -r ssl_has=$(config_settings_server_ssl_has)
  if [[ -n "${ssl_has}" ]]; then
    local ssl_cert
    ssl_cert=$(config_settings_server_ssl "certificate")
    local ssl_cert_key
    ssl_cert_key=$(config_settings_server_ssl "certificate_key")
    cat << EOT
  listen 443 ssl http2 default_server;
  listen [::]:443 ssl http2 default_server;

  ssl_certificate ${ssl_cert};
  ssl_certificate_key ${ssl_cert_key};

EOT
  fi

  if [[ -n "${cache_has}" ]]; then
    cat << EOT
  gzip on;
  gzip_types application/json;
  gzip_vary on;

  location / {
    proxy_cache cache;
    proxy_pass http://127.0.0.1:8080;
    proxy_cache_valid 200 ${cache_time};
    proxy_cache_bypass \$cookie_nocache \$arg_nocache\$arg_comment;
    proxy_http_version 1.1;
    proxy_ignore_client_abort on;
    proxy_ignore_headers Cache-Control;
    add_header X-Cache-Status \$upstream_cache_status;
  }
}

server {
  listen 8080;

EOT
  fi

  local json_file
  json_file=$(config_json)
  cat << EOT
  default_type application/json;

EOT
  if [[ -z "${cache_has}" ]]; then
    cat << EOT
  gzip on;
  gzip_types application/json;
  gzip_vary on;

EOT
  fi
  cat << EOT
  jq_json_file ${json_file};
EOT
  local library_path
  library_path=$(config_library_path)
  if [[ -n "${library_path}" ]]; then
    cat << EOT
  jq_library_path ${library_path};
EOT
  fi

  local -r cors_has=$(config_settings_server_cors_has)
  local -r cors_orign=$(config_settings_server_cors "origin")
  local -r cors_methods=$(config_settings_server_cors "methods")
  local -r cors_headers=$(config_settings_server_cors "headers")
  local -r cors_credentials=$(config_settings_server_cors "credentials")

  if [[ -n "${cors_has}" ]]; then
    cat > "${work_dir}/preflight.conf" << EOF
if (\$request_method = 'OPTIONS') {
  add_header Content-Type 'text/plain charset=UTF-8';
  add_header Content-Length 0;
  add_header Access-Control-Max-Age 3600;
  return 204;
}
EOF

    if [[ -z "${cors_orign}" ]] || [[ "${cors_orign}" == "*" ]]; then
      cat << EOT

  add_header Access-Control-Allow-Origin "*" always;
EOT
    else
      cat << EOT

  set \$cors_origin '';
  if (\$http_origin ~ '${cors_orign}') {
    set \$cors_origin \$http_origin;
  }
  add_header Access-Control-Allow-Origin "\$cors_origin" always;
  add_header Vary 'Origin';
EOT
    fi
    cat << EOT
  add_header Access-Control-Allow-Methods "${cors_methods:-*}";
  add_header Access-Control-Allow-Headers "${cors_headers:-*}";
EOT
    if [[ "${cors_credentials}" == "true" ]]; then
      cat << EOT
  add_header Access-Control-Allow-Credentials true;
EOT
    fi
  fi

  local route
  local var
  local filter
  while IFS= read -r route; do
    filter=$(config_routes_filter "${route}")
    cat << EOT

  location = /${route} {
EOT
    if [[ -n "${cors_has}" ]]; then
      cat << EOT
    include ${work_dir}/preflight.conf;
EOT
    fi
    while IFS= read -r var; do
      if [[ -z "${var}" ]]; then
        continue
      fi
      config_arguments_has "${var}"
    cat << EOT
    jq_set_variable ${var} \$${var} final;
EOT
    done < <(config_route_remove_curly_braces "${route}")
    while IFS= read -r var; do
      if [[ -z "${var}" ]]; then
        continue
      fi
    cat << EOT
    jq_set_variable ${var} "";
EOT
    done < <(config_routes_parameters "${route}")
    cat << EOT
    jq_filter '${filter}';
  }
EOT
  done < <(config_routes_keys | grep -v '{.*}')

  local pattern
  local regex
  while IFS= read -r route; do
    regex="${route}"
    while IFS= read -r var; do
      if [[ -z "${var}" ]]; then
        continue
      fi
      pattern=$(config_arguments_pattern "${var}")
      regex=${regex//\{${var}\}/(?<${var}>${pattern})}
    done < <(config_route_remove_curly_braces "${route}")

    filter=$(config_routes_filter "${route}")
    cat << EOT

  location ~ ^/${regex}\$ {
EOT
    if [[ -n "${cors_has}" ]]; then
      cat << EOT
    include ${work_dir}/preflight.conf;
EOT
    fi
    while IFS= read -r var; do
      if [[ -z "${var}" ]]; then
        continue
      fi
      config_arguments_has "${var}"
    cat << EOT
    jq_set_variable ${var} \$${var} final;
EOT
    done < <(config_route_remove_curly_braces "${route}")
    while IFS= read -r var; do
      if [[ -z "${var}" ]]; then
        continue
      fi
    cat << EOT
    jq_set_variable ${var} "";
EOT
    done < <(config_routes_parameters "${route}")
    cat << EOT
    jq_filter '${filter}';
  }
EOT
  done < <(config_routes_keys | grep '{.*}' | sort -r)

  var=$(config_settings_server_error_filter)
  if [[ -z "${var}" ]]; then
    var='{"code":"ERROR","message":"An error has occurred"}'
  fi
  cat << EOT

  location / {
    return 404;
  }
  error_page 400 403 404 500 503 @error;
  location @error {
EOT
  if [[ -n "${cors_has}" ]]; then
    cat << EOT
    include ${work_dir}/preflight.conf;
EOT
  fi
  cat << EOT
    internal;
    jq_filter '${var}';
  }
}
EOT
}

checksum()
{
  if [[ ! -f "${checksum_file}" ]] || [[ "${*}" =~ -u ]]; then
    sha1sum "${config}" > "${checksum_file}"
  fi
  sha1sum -c "${checksum_file}" > /dev/null 2>&1
}

generate_cli_script()
{
  generator_bash_script "${config}" > "${cli_script}"
  chmod 755 "${cli_script}"
  case "${1}" in
    -)
      cat "${cli_script}"
      ;;
    -v)
      echo "=> generate cli script: ${cli_script}"
      ;;
  esac
  checksum -u
}

generate_server_configuration()
{
  generage_nginx_config "${config}" > "${server_config}"
  case "${1}" in
    -)
      cat "${server_config}"
      ;;
    -v)
      echo "=> generate server configuration: ${server_config}"
      ;;
  esac
  checksum -u
}

cli()
{
  if [[ ! -f "${cli_script}" ]] || ! checksum; then
    generate_cli_script
  fi

  exec "${cli_script}" "${@}"
}

server()
{
  if [[ ! -f "${server_config}" ]] || ! checksum; then
    generate_server_configuration
  fi

  if [[ "${1}" == "reload" ]]; then
    exec nginx -s reload
  else
    exec nginx -g 'daemon off;'
  fi
}

help()
{
  cat << EOT
Usage: ${0##*/} <COMMAND>

Command:
  generate [cli|server] [-]  create cli script and server configuration
  cli                        run cli
  server [reload]            run or reload server
EOT
}

main()
{
  if [[ ! -f "${config}" ]]; then
    echo "${0##*/}: no such config file: ${config}" >&2
    exit 1
  fi

  case "${1}" in
    generate)
      if [[ -z "${2}" ]] || [[ "${2}" == "cli" ]]; then
        generate_cli_script "${3:--v}"
      fi
      if [[ -z "${2}" ]] || [[ "${2}" == "server" ]]; then
        generate_server_configuration "${3:--v}"
      fi
      ;;
    cli)
      shift 1
      cli "${@}"
      ;;
    server)
      shift 1
      server "${@}"
      ;;
    -h|--help)
      help
      exit 0
      ;;
    *)
      help
      exit 1
      ;;
  esac
}

main "${@}"
